import mathimport scipy.stats as stimport numpy as npfrom scipy.stats import shapirofrom scipy.stats import normaltest# CALCULATE Z VALUEdef get_z(confidence_level:float)->float:    """    Calculate Z value for a given confidence level.        confidence_level -- confidence level into percent.     return -- z value.    """    return st.norm.ppf(1-(1-confidence_level/100.)/2)# CALCULATE THE SAMPLE SIZEdef sample_size(population_size:int, confidence_level:float, confidence_interval:float)->int:    """    Calculate the sample size using the Cochranâ€™s Sample Size Formula.        population_size -- the total population size.    confidence_level -- the seleceted confidence level in percent.     confidence_interval -- the selected confidence interval in percent.    return -- sample size with the correction for smaller population (no large).    """    Z = 0.0    p = 0.5    e = confidence_interval/100.0    N = population_size    n_0 = 0.0    n = 0.0    # FIND THE NUM STD DEVIATIONS FOR THAT CONFIDENCE LEVEL    Z = get_z(confidence_level)    if Z == 0.0:        return -1    # CALC SAMPLE SIZE    n_0 = ((Z**2) * p * (1-p)) / (e**2)    # ADJUST SAMPLE SIZE FOR FINITE POPULATION    n = n_0 / (1 + ((n_0 - 1) / float(N)) )    return int(math.ceil(n)) # THE SAMPLE SIZE## Tests whether a data sample has a Gaussian distribution according Shapiro testdef test_shapiro(data:np.array, significance:float = 0.05, verbose:bool = False) ->bool:    """    Tests whether a data sample has a Gaussian distribution according Shapiro test.    Parameters    ----------    data : np.array()        Data to be tested.    significance : float, optional        Level of significance. The default is 0.05.    verbose : bool, optional        Display information or not. The default is False.    Returns    -------    bool        If data has a Gaussian distribution or not.    """    # estimate cofindence level    confidence = (1 - significance) * 100    # test    stat, p = shapiro(data)    # display    if verbose:        print('stat=%.3f, p=%.3f' % (stat, p))    # check result and return    if p > significance:        if verbose:            print(f'Probably Gaussian (confidence level = {confidence}%)')        return True    else:        if verbose:            print(f'Probably not Gaussian (confidence level = {confidence}%)')        return False                ## Tests whether a data sample has a Gaussian distribution according K2 testdef test_k2(data:np.array, significance:float = 0.05, verbose:bool = False) ->bool:    """    Tests whether a data sample has a Gaussian distribution according K2 test.    Parameters    ----------    data : np.array()        Data to be tested.    significance : float, optional        Level of significance. The default is 0.05.    verbose : bool, optional        Display information or not. The default is False.    Returns    -------    bool        If data has a Gaussian distribution or not.    """    # estimate cofindence level    confidence = (1 - significance) * 100    # test        stat, p = normaltest(data)    # display    if verbose:        print('stat=%.3f, p=%.3f' % (stat, p))    # check result and return    if p > significance:        if verbose:            print(f'Probably Gaussian (confidence level = {confidence}%)')        return True    else:        if verbose:            print(f'Probably not Gaussian (confidence level = {confidence}%)')        return False        ## Normality test analysisdef analysis_normality(data:np.array, significance:float = 0.05, verbose:bool = False)->(bool,str):    """    Normality test analysis.    Parameters    ----------    data : np.array        Data to be tested.    significance : float, optional        Significance level. The default is 0.05.    verbose : bool, optional        Display information or not. The default is False.    Returns    -------    bool, str        It is Normal or not and report about results of testing.    """    # estimate cofindence level    confidence = (1 - significance) * 100            # Shapiro test    result_shapiro = test_shapiro(data, significance = significance, verbose = verbose)    # K2 test    result_k2 = test_k2(data, significance = significance, verbose = verbose)       # initialize report    sreport = f'Probably Gaussian (confidence level = {confidence}%) according to:'    # build the final report    if result_shapiro and not result_k2:        sreport += '"Shapiro test".'    elif not result_shapiro and  result_k2:        sreport += '"K2 test".'    elif result_shapiro and result_k2:        sreport += '"Shapiro test" and "K2 test".'    else:        sreport = ''    # display    if verbose:        print(sreport)    # return    return result_shapiro or result_k2, sreport            