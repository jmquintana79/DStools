import pandas as pdimport numpy as npfrom classes import Columns## remove outliers of a 1D array according to the Inter Quartile Range (IQR)def remove_outliers(df:pd.DataFrame, colname:str, verbose:bool = False)->(np.array, list):    # get data    v = df[colname].values    # estimate boundary thresholds    Q1 = np.quantile(v,0.25)    Q3 = np.quantile(v,0.75)    IQR = Q3 - Q1    t_lower = Q1 - 1.5*IQR    t_upper = Q3 + 1.5*IQR    # report preparation    reports = list()    noutliers_down = v[v < t_lower].shape[0]    noutliers_up = v[v > t_upper].shape[0]    if  noutliers_down > 0:        reports.append(f'It was removed {noutliers_down} outliers: "{colname}" < {t_lower}')     if  noutliers_up > 0:        reports.append(f'It was removed {noutliers_up} outliers: "{colname}" > {t_upper}')                 # display    if verbose:        print(f'It was removed {noutliers_down} outliers: "{colname}" < {t_lower}')        print(f'It was removed {noutliers_up} outliers: "{colname}" > {t_upper}')    # remove values outside of these thresholds and return    v[v < t_lower] = np.nan    v[v > t_upper] = np.nan    # replace column    df[colname] = df[colname]    # return    return df, reports## categorical values conversiondef conversion_categorical_values(df:pd.DataFrame, col:str)->(pd.DataFrame, dict):    # rename column    df.rename(columns = {col:'original'}, inplace = True)    # factorize    df[col] = pd.factorize(df['original'])[0]    # as str    df[col] = df[col].astype(str)    # create conversor    dcat = df[['original', col]].drop_duplicates().set_index(col).to_dict()['original']    # remove original column    df.drop('original', axis = 1, inplace = True)    # return    return (df, dcat)## simplify datasetdef data_simplify(raw:pd.DataFrame)->(pd.DataFrame, dict, dict):    # copy     data = raw.copy()    # get columns    cols = Columns(data)    # initialize    dcols_name_to_alias = dict()    dcols_alias_to_name = dict()    # columns name converters: numerical    if len(cols.num)>0:        for i, ic in enumerate(cols.num):            dcols_name_to_alias[ic] = 'n{}'.format(i)            dcols_alias_to_name['n{}'.format(i)] = ic    # columns name converters: categorical    if len(cols.cat)>0:        for i, ic in enumerate(cols.cat):            dcols_name_to_alias[ic] = 'c{}'.format(i)            dcols_alias_to_name['c{}'.format(i)] = ic    # columns name converters: ordinal    if len(cols.ord)>0:        for i, ic in enumerate(cols.ord):            dcols_name_to_alias[ic] = 'o{}'.format(i)            dcols_alias_to_name['o{}'.format(i)] = ic    # rename columns    data.rename(columns = dcols_name_to_alias, inplace = True)    # get columns    cols_new = Columns(data)    # initialize    d_converter_cat_values = dict()    # loop of categorical columns    for col in cols_new.cat:        data, d_converter_cat_values[col] = conversion_categorical_values(data, col)    # return    return (data, dcols_alias_to_name, d_converter_cat_values)