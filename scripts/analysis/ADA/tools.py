import numpy as npimport pandas as pdfrom classes import Columns## thresholds for metrics according level of exigencedef thresholds_according_level_exigence(level:str = 'normal')->dict:    """    Thresholds for metrics according level of exigence.    Parameters    ----------    level : str, optional        Level of exigence. It is only possible 'low', 'normal' and 'high'. The default is 'normal'.    Returns    -------    dict        Thresholds according to the selected level of exigence.    """    # validate    assert level in ['low', 'normal', 'high'], "It is only possible these level of exigences: 'low', 'normal', 'high'"    # initialize    dexigence = dict()    # set    if level == 'low':        dexigence['correlation'] = 0.25        dexigence['significance'] = 0.1    elif level == 'normal':        dexigence['correlation'] = 0.5        dexigence['significance'] = 0.05    else:        dexigence['correlation'] = 0.75        dexigence['significance'] = 0.01    # return    return dexigence## Check if there are enough data to do a statisticsdef check_is_enough_data(data:np.array, threshold:int)->bool:    """    Check if there are enough data to do a statistics.    Parameters    ----------    data : np.array        Data to be validated.    threshold : int        Limit to consider enough or not.    Returns    -------    bool        Result of the validation.    """    # remove nan values    data = data[~np.isnan(data)]    # validate and return    if len(data) >= threshold:        return True    else:        return False        ## Get type of data in a dataframedef get_type_columns(df:pd.DataFrame)->dict:    """    Get type of data in a dataframe.    Parameters    ----------    df : pd.DataFrame        Dataframe to be used.    Returns    -------    dict        Type of data per column.    """    # get columns    cols = Columns(df.dropna())    # initialize    dtypecols = dict()    # loop of columns    for col in df.columns.tolist():        # validate and set type        if col in list(cols.num):            dtypecols[col] = 'num'        elif col in list(cols.ord):            dtypecols[col] = 'ord'            elif col in list(cols.cat):            dtypecols[col] = 'cat'           else:            dtypecols[col] = 'other'           # return    return dtypecols                                            